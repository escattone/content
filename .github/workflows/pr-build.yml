# Note that this workflow uses `get-diff-action` which is important.
# It gives us an environment variable called `GIT_DIFF` which is a string
# that is a list of file paths.
# If you want to do what this workflow does on your laptop you can simulate
# it like this:
#
#    export GIT_DIFF=`git diff --name-only main... | grep 'files/' | grep '\.html$'`
#    node content build --no-progressbar --files="${GIT_DIFF}"
#
# That way, you can behave on your laptop like, this action behaves here.

name: PR Build

on:
  pull_request:
    branches:
      - main
    paths:
      - files/**/*.html
      # - .github/workflows/pr-build.yml

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: technote-space/get-diff-action@v4.0.5
        with:
          PATTERNS: files/**/*.html

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: "12"

      - name: Cache node_modules
        uses: actions/cache@v2.1.3
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn --frozen-lockfile

      - name: Build changed content
        if: env.GIT_DIFF
        env:
          CONTENT_ROOT: ${{ github.workspace }}/files
          # Some day, when our number of flaws have reached 0 we'll change
          # this to "*:error" which means the slightest flaw in the build
          # will break the build.
          # See https://github.com/mdn/yari/issues/715
          BUILD_FLAW_LEVELS: "*:ignore"

          # Setting this to an empty string effectively means that the
          # <iframe> src will end up being the relative URL of the current
          # document as a base.
          # I.e. like this, if the current document is '/en-US/docs/Foo':
          #  <iframe src="/en-US/docs/Foo/_samples_/index.html">
          # ...for example.
          # Yes, it's potentially "insecure" because the iframe will execute
          # whatever code is inserted into the code example. But since the
          # whole (possible) domain for PR builds will never be somewhere
          # where there are interesting cookies, it's a safe choice.
          BUILD_LIVE_SAMPLES_BASE_URL: ""

          # In these builds we never care for or need the ability to sign in.
          # This environment variable will disable that functionality entirely.
          REACT_APP_DISABLE_AUTH: true

          # TODO: This should be implicit when `CI=true`
          BUILD_NO_PROGRESSBAR: true

        run: |
          # Note, it might be interesting to explore building *some*
          # pages in a PR build if the diff doesn't have any index.html
          # files changed.
          # Instead of building the git diff, you build some known typical
          # folders that you know don't take too long and do cover a lot
          # of interesting macros etc.
          # This way, when an edit to the source code comes in, perhaps the
          # functional tests have a gap in them but actually building
          # real content exposes it.

          # The reason this script isn't in `package.json` is because
          # you don't need that script as a writer. It's only used in CI
          # and it can't use the default CONTENT_ROOT that gets set in
          # package.json.
          node node_modules/@mdn/yari/build/cli.js ${{ env.GIT_DIFF }}

          du -sh client/build
          du -sh client/build/en-us

      - uses: actions/checkout@v2
        with:
          repository: mdn/yari
          path: yari

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: yari/deployer/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deployer
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd yari/deployer
          poetry install

      - name: Deploy built files
        env:
          CONTENT_ROOT: ${{ github.workspace }}/files
          DEPLOYER_BUCKET_NAME: mdn-content-dev
          # PR_NUMBER: $(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          # DEPLOYER_BUCKET_PREFIX: pr${{ PR_NUMBER }}

          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_DEV_AWS_SECRET_ACCESS_KEY }}

        run: |
          cd yari/deployer
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          poetry run deployer --dry-run upload --prefix="pr$PR_NUMBER" ../client/build
